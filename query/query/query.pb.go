// Code generated by protoc-gen-go. DO NOT EDIT.
// source: query.proto

package query

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type Query struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{0}
}
func (m *Query) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Query.Unmarshal(m, b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Query.Marshal(b, m, deterministic)
}
func (m *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(m, src)
}
func (m *Query) XXX_Size() int {
	return xxx_messageInfo_Query.Size(m)
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

func (m *Query) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greetings
type Reply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{1}
}
func (m *Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reply.Unmarshal(m, b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
}
func (m *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(m, src)
}
func (m *Reply) XXX_Size() int {
	return xxx_messageInfo_Reply.Size(m)
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Query)(nil), "query.Query")
	proto.RegisterType((*Reply)(nil), "query.Reply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LogQueryClient is the client API for LogQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogQueryClient interface {
	// Sends a greeting
	ReturnResult(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Reply, error)
}

type logQueryClient struct {
	cc *grpc.ClientConn
}

func NewLogQueryClient(cc *grpc.ClientConn) LogQueryClient {
	return &logQueryClient{cc}
}

func (c *logQueryClient) ReturnResult(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/query.LogQuery/ReturnResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogQueryServer is the server API for LogQuery service.
type LogQueryServer interface {
	// Sends a greeting
	ReturnResult(context.Context, *Query) (*Reply, error)
}

func RegisterLogQueryServer(s *grpc.Server, srv LogQueryServer) {
	s.RegisterService(&_LogQuery_serviceDesc, srv)
}

func _LogQuery_ReturnResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogQueryServer).ReturnResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.LogQuery/ReturnResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogQueryServer).ReturnResult(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogQuery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "query.LogQuery",
	HandlerType: (*LogQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReturnResult",
			Handler:    _LogQuery_ReturnResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "query.proto",
}

func init() { proto.RegisterFile("query.proto", fileDescriptor_5c6ac9b241082464) }

var fileDescriptor_5c6ac9b241082464 = []byte{
	// 130 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x2c, 0x4d, 0x2d,
	0xaa, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0xa4, 0xb9, 0x58, 0x03,
	0x41, 0x0c, 0x21, 0x21, 0x2e, 0x96, 0xbc, 0xc4, 0xdc, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce,
	0x20, 0x30, 0x5b, 0x49, 0x91, 0x8b, 0x35, 0x28, 0xb5, 0x20, 0xa7, 0x52, 0x48, 0x82, 0x8b, 0x3d,
	0x37, 0xb5, 0xb8, 0x38, 0x31, 0x1d, 0x26, 0x0f, 0xe3, 0x1a, 0x59, 0x70, 0x71, 0xf8, 0xe4, 0xa7,
	0x43, 0x8c, 0xd0, 0xe1, 0xe2, 0x09, 0x4a, 0x2d, 0x29, 0x2d, 0xca, 0x0b, 0x4a, 0x2d, 0x2e, 0xcd,
	0x29, 0x11, 0xe2, 0xd1, 0x83, 0x58, 0x08, 0x96, 0x95, 0x82, 0xf1, 0xc0, 0x26, 0x2a, 0x31, 0x24,
	0xb1, 0x81, 0xdd, 0x61, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x05, 0x6e, 0x3e, 0x16, 0x96, 0x00,
	0x00, 0x00,
}
